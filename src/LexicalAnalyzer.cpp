/* Generated by re2c */
#include "LexicalAnalyzer.hpp"
#include "Util.hpp"

#include <iostream>
#include <utility>

using namespace thl;

LexicalAnalyzer::LexicalAnalyzer()
    : m_textPos(std::make_pair(0, 0)) {}

LexicalAnalyzer::~LexicalAnalyzer() {}

void thl::LexicalAnalyzer::setTokenTable(
    std::shared_ptr<TokenTable> lexemTable) {
  m_tokenTable = lexemTable;
}

void thl::LexicalAnalyzer::setConstTable(
    std::shared_ptr<ConstTable> constTable) {
  m_constTable = constTable;
}

void thl::LexicalAnalyzer::setIdentTable(
    std::shared_ptr<IdentTable> identTable) {
  m_identTable = identTable;
}

void thl::LexicalAnalyzer::parse(std::string &line) {
  m_textPos.first++;
  m_textPos.second = 0;
  getTokens(line);
}

void thl::LexicalAnalyzer::getTokens(std::string &line) {
  Token token;

  const char* p = line.c_str();
  const char* q;
  const char* start;
  size_t count = 0;

  for (;;) {
    m_textPos.second++;
    start = p;

    
{
	char yych;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		160, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 128, 128, 128, 128, 192, 
		128, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	yych = *p;
	if (yybm[0+yych] & 32) {
		goto yy9;
	}
	if (yych <= ',') {
		if (yych <= '#') {
			if (yych <= '\f') {
				if (yych <= 0x00) goto yy2;
				if (yych == '\n') goto yy6;
				goto yy4;
			} else {
				if (yych <= 0x1F) {
					if (yych <= '\r') goto yy8;
					goto yy4;
				} else {
					if (yych <= '!') goto yy12;
					if (yych <= '"') goto yy4;
					goto yy14;
				}
			}
		} else {
			if (yych <= '\'') {
				if (yych <= '$') goto yy16;
				if (yych == '&') goto yy18;
				goto yy4;
			} else {
				if (yych <= ')') {
					if (yych <= '(') goto yy20;
					goto yy22;
				} else {
					if (yych <= '*') goto yy24;
					if (yych <= '+') goto yy26;
					goto yy28;
				}
			}
		}
	} else {
		if (yych <= '?') {
			if (yych <= '0') {
				if (yych <= '-') goto yy30;
				if (yych <= '.') goto yy4;
				if (yych <= '/') goto yy32;
				goto yy34;
			} else {
				if (yych <= '9') {
					if (yych <= '1') goto yy36;
					goto yy4;
				} else {
					if (yych <= ':') goto yy38;
					if (yych <= '>') goto yy4;
					goto yy39;
				}
			}
		} else {
			if (yych <= 'z') {
				if (yych <= '@') goto yy4;
				if (yych <= 'Z') goto yy41;
				if (yych <= '`') goto yy4;
				goto yy41;
			} else {
				if (yych <= '|') {
					if (yych <= '{') goto yy4;
					goto yy44;
				} else {
					if (yych == '~') goto yy46;
					goto yy4;
				}
			}
		}
	}
yy2:
	++p;
	{ 
      tokenPushBack(TokenType::ENDL, -1, m_textPos); 
      break; 
    }
yy4:
	++p;
yy5:
	{
      std::string err = "(" + std::to_string(m_textPos.first) + "," +
                           std::to_string(m_textPos.second) +
                           ") Error: Unknown identifier";
      throw ParseException(err);
      break;
    }
yy6:
	++p;
	{ 
      tokenPushBack(TokenType::ENDL, -1, m_textPos); 
      break; 
    }
yy8:
	yych = *++p;
	if (yych == '\n') goto yy48;
	goto yy5;
yy9:
	yych = *(q = ++p);
	if (yybm[0+yych] & 32) {
		goto yy9;
	}
	if (yych <= '\f') {
		if (yych == '\n') goto yy6;
	} else {
		if (yych <= '\r') goto yy50;
		if (yych == '/') goto yy52;
	}
yy11:
	{ continue; }
yy12:
	++p;
	{ 
      tokenPushBack(TokenType::ZPOS, -1, m_textPos);
      continue;
    }
yy14:
	++p;
	{ 
      tokenPushBack(TokenType::XOR, -1, m_textPos);
      continue;
    }
yy16:
	++p;
	{
      tokenPushBack(TokenType::NUMBER, (int)m_constTable->size(), m_textPos);
      m_constTable->push_back(-1);
      continue;
    }
yy18:
	++p;
	{ 
      tokenPushBack(TokenType::AND, -1, m_textPos);
      continue;
    }
yy20:
	++p;
	{ 
      tokenPushBack(TokenType::OPEN_BRACKET, -1, m_textPos);
      continue;
    }
yy22:
	++p;
	{ 
      tokenPushBack(TokenType::CLOSE_BRACKET, -1, m_textPos);
      continue;
    }
yy24:
	++p;
	{ 
      tokenPushBack(TokenType::MUL, -1, m_textPos);
      continue;
    }
yy26:
	yych = *++p;
	if (yych == '+') goto yy53;
	if (yych == '>') goto yy55;
	{ 
      tokenPushBack(TokenType::ADD, -1, m_textPos);
      continue;
    }
yy28:
	++p;
	{ 
      tokenPushBack(TokenType::DELIMITER, -1, m_textPos);
      continue;
    }
yy30:
	yych = *++p;
	if (yych == '-') goto yy57;
	if (yych == '>') goto yy59;
	{ 
      tokenPushBack(TokenType::SUB, -1, m_textPos);
      continue;
    }
yy32:
	yych = *++p;
	if (yych == '/') goto yy61;
	{
      tokenPushBack(TokenType::DIF, -1, m_textPos);
      continue;
    }
yy34:
	++p;
	{
      tokenPushBack(TokenType::NUMBER, (int)m_constTable->size(), m_textPos);
      m_constTable->push_back(0);
      continue;
    }
yy36:
	++p;
	{
      tokenPushBack(TokenType::NUMBER, (int)m_constTable->size(), m_textPos);
      m_constTable->push_back(1);
      continue;
    }
yy38:
	yych = *++p;
	if (yych == '=') goto yy64;
	goto yy5;
yy39:
	++p;
	{ 
      tokenPushBack(TokenType::ZNEG, -1, m_textPos);
      continue;
    }
yy41:
	yych = *++p;
	if (yybm[0+yych] & 64) {
		goto yy41;
	}
	{
      tokenPushBack(TokenType::IDENTIFIER,
        (int)m_identTable->size(), m_textPos);

      std::string s;
      s.assign(start, p - start);
      m_identTable->push_back(s);
      continue;
    }
yy44:
	++p;
	{ 
      tokenPushBack(TokenType::OR, -1, m_textPos);
      continue;
    }
yy46:
	++p;
	{ 
      tokenPushBack(TokenType::NOT, -1, m_textPos);
      continue;
    }
yy48:
	++p;
	{ 
      tokenPushBack(TokenType::ENDL, -1, m_textPos); 
      break; 
    }
yy50:
	yych = *++p;
	if (yych == '\n') goto yy48;
yy51:
	p = q;
	goto yy11;
yy52:
	yych = *++p;
	if (yych == '/') goto yy61;
	goto yy51;
yy53:
	++p;
	{ 
      tokenPushBack(TokenType::INCREMENT, -1, m_textPos);
      continue;
    }
yy55:
	++p;
	{ 
      tokenPushBack(TokenType::IMPLICATIONB, -1, m_textPos);
      continue;
    }
yy57:
	++p;
	{ 
      tokenPushBack(TokenType::DECREMENT, -1, m_textPos);
      continue;
    }
yy59:
	++p;
	{ 
      tokenPushBack(TokenType::IMPLICATION, -1, m_textPos);
      continue;
    }
yy61:
	yych = *++p;
	if (yybm[0+yych] & 128) {
		goto yy61;
	}
	{ break; }
yy64:
	++p;
	{ 
      tokenPushBack(TokenType::ASSIGMENT, -1, m_textPos);
      continue;
    }
}

  }
}
