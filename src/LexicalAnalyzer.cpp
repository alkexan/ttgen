/* Generated by re2c */
#include "LexicalAnalyzer.hpp"
#include "Util.hpp"

#include <iostream>
#include <utility>

using namespace thl;

LexicalAnalyzer::LexicalAnalyzer()
    : m_textPos(std::make_pair(0, 0)) {}

LexicalAnalyzer::~LexicalAnalyzer() {}

void thl::LexicalAnalyzer::setTokenTable(
    std::shared_ptr<TokenTable> lexemTable) {
  m_tokenTable = lexemTable;
}

void thl::LexicalAnalyzer::setConstTable(
    std::shared_ptr<ConstTable> constTable) {
  m_constTable = constTable;
}

void thl::LexicalAnalyzer::setIdentTable(
    std::shared_ptr<IdentTable> identTable) {
  m_identTable = identTable;
}

void thl::LexicalAnalyzer::parse(std::string &line) {
  m_textPos.first++;
  m_textPos.second = 0;
  getTokens(line);
}

void thl::LexicalAnalyzer::getTokens(std::string &line) {
  Token token;

  const char* p = line.c_str();
  const char* q;
  const char* start;
  size_t count = 0;

  for (;;) {
    m_textPos.second++;
    start = p;

    
{
	char yych;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		160, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 128, 128, 128, 128, 192, 
		128, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	yych = *p;
	if (yybm[0+yych] & 32) {
		goto yy6;
	}
	if (yych <= ',') {
		if (yych <= '$') {
			if (yych <= '\f') {
				if (yych <= 0x00) goto yy1;
				if (yych == '\n') goto yy4;
				goto yy2;
			} else {
				if (yych <= '\r') goto yy5;
				if (yych <= '"') goto yy2;
				if (yych <= '#') goto yy8;
				goto yy9;
			}
		} else {
			if (yych <= '(') {
				if (yych == '&') goto yy10;
				if (yych <= '\'') goto yy2;
				goto yy11;
			} else {
				if (yych <= ')') goto yy12;
				if (yych <= '*') goto yy13;
				if (yych <= '+') goto yy14;
				goto yy15;
			}
		}
	} else {
		if (yych <= '@') {
			if (yych <= '0') {
				if (yych <= '-') goto yy16;
				if (yych <= '.') goto yy2;
				if (yych <= '/') goto yy17;
				goto yy18;
			} else {
				if (yych <= '1') goto yy19;
				if (yych == ':') goto yy20;
				goto yy2;
			}
		} else {
			if (yych <= '{') {
				if (yych <= 'Z') goto yy21;
				if (yych <= '`') goto yy2;
				if (yych <= 'z') goto yy21;
				goto yy2;
			} else {
				if (yych <= '|') goto yy22;
				if (yych == '~') goto yy23;
				goto yy2;
			}
		}
	}
yy1:
	++p;
	{ 
      tokenPushBack(TokenType::ENDL, -1, m_textPos); 
      break; 
    }
yy2:
	++p;
yy3:
	{
      std::string err = "(" + std::to_string(m_textPos.first) + "," +
                           std::to_string(m_textPos.second) +
                           ") Error: Unknown identifier";
      throw ParseException(err);
      break;
    }
yy4:
	++p;
	{ 
      tokenPushBack(TokenType::ENDL, -1, m_textPos); 
      break; 
    }
yy5:
	yych = *++p;
	if (yych == '\n') goto yy24;
	goto yy3;
yy6:
	yych = *(q = ++p);
	if (yybm[0+yych] & 32) {
		goto yy6;
	}
	if (yych <= '\f') {
		if (yych == '\n') goto yy4;
	} else {
		if (yych <= '\r') goto yy25;
		if (yych == '/') goto yy27;
	}
yy7:
	{ continue; }
yy8:
	++p;
	{ 
      tokenPushBack(TokenType::XOR, -1, m_textPos);
      continue;
    }
yy9:
	++p;
	{
      tokenPushBack(TokenType::NUMBER, (int)m_constTable->size(), m_textPos);
      m_constTable->push_back(-1);
      continue;
    }
yy10:
	++p;
	{ 
      tokenPushBack(TokenType::AND, -1, m_textPos);
      continue;
    }
yy11:
	++p;
	{ 
      tokenPushBack(TokenType::OPEN_BRACKET, -1, m_textPos);
      continue;
    }
yy12:
	++p;
	{ 
      tokenPushBack(TokenType::CLOSE_BRACKET, -1, m_textPos);
      continue;
    }
yy13:
	++p;
	{ 
      tokenPushBack(TokenType::MUL, -1, m_textPos);
      continue;
    }
yy14:
	yych = *++p;
	if (yych == '+') goto yy28;
	if (yych == '>') goto yy29;
	{ 
      tokenPushBack(TokenType::ADD, -1, m_textPos);
      continue;
    }
yy15:
	++p;
	{ 
      tokenPushBack(TokenType::DELIMITER, -1, m_textPos);
      continue;
    }
yy16:
	yych = *++p;
	if (yych == '-') goto yy30;
	if (yych == '>') goto yy31;
	{ 
      tokenPushBack(TokenType::SUB, -1, m_textPos);
      continue;
    }
yy17:
	yych = *++p;
	if (yych == '/') goto yy32;
	{
      tokenPushBack(TokenType::DIF, -1, m_textPos);
      continue;
    }
yy18:
	++p;
	{
      tokenPushBack(TokenType::NUMBER, (int)m_constTable->size(), m_textPos);
      m_constTable->push_back(0);
      continue;
    }
yy19:
	++p;
	{
      tokenPushBack(TokenType::NUMBER, (int)m_constTable->size(), m_textPos);
      m_constTable->push_back(1);
      continue;
    }
yy20:
	yych = *++p;
	if (yych == '=') goto yy33;
	goto yy3;
yy21:
	yych = *++p;
	if (yybm[0+yych] & 64) {
		goto yy21;
	}
	{
      tokenPushBack(TokenType::IDENTIFIER,
        (int)m_identTable->size(), m_textPos);

      std::string s;
      s.assign(start, p - start);
      m_identTable->push_back(s);
      continue;
    }
yy22:
	yych = *++p;
	if (yych == '-') goto yy34;
	if (yych == '=') goto yy35;
	goto yy3;
yy23:
	++p;
	{ 
      tokenPushBack(TokenType::NOT, -1, m_textPos);
      continue;
    }
yy24:
	++p;
	{ 
      tokenPushBack(TokenType::ENDL, -1, m_textPos); 
      break; 
    }
yy25:
	yych = *++p;
	if (yych == '\n') goto yy24;
yy26:
	p = q;
	goto yy7;
yy27:
	yych = *++p;
	if (yych == '/') goto yy32;
	goto yy26;
yy28:
	++p;
	{ 
      tokenPushBack(TokenType::INCREMENT, -1, m_textPos);
      continue;
    }
yy29:
	++p;
	{ 
      tokenPushBack(TokenType::IMPLB, -1, m_textPos);
      continue;
    }
yy30:
	++p;
	{ 
      tokenPushBack(TokenType::DECREMENT, -1, m_textPos);
      continue;
    }
yy31:
	++p;
	{ 
      tokenPushBack(TokenType::IMPL, -1, m_textPos);
      continue;
    }
yy32:
	yych = *++p;
	if (yybm[0+yych] & 128) {
		goto yy32;
	}
	{ break; }
yy33:
	++p;
	{ 
      tokenPushBack(TokenType::ASSIGMENT, -1, m_textPos);
      continue;
    }
yy34:
	++p;
	{ 
      tokenPushBack(TokenType::LIMPL, -1, m_textPos);
      continue;
    }
yy35:
	++p;
	{ 
      tokenPushBack(TokenType::IMPLM, -1, m_textPos);
      continue;
    }
}

  }
}
